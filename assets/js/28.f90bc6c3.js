(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{590:function(s,t,a){s.exports=a.p+"assets/img/js-type.45a6a867.png"},674:function(s,t,a){"use strict";a.r(t);var n=a(9),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"js基础-数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js基础-数据类型"}},[s._v("#")]),s._v(" JS基础：数据类型")]),s._v(" "),n("h2",{attrs:{id:"_1-基本数据类型-值类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本数据类型-值类型"}},[s._v("#")]),s._v(" 1. 基本数据类型（值类型）")]),s._v(" "),n("ul",[n("li",[s._v("number")]),s._v(" "),n("li",[s._v("string")]),s._v(" "),n("li",[s._v("boolean")]),s._v(" "),n("li",[s._v("null")]),s._v(" "),n("li",[s._v("undefined")]),s._v(" "),n("li",[s._v("symol")]),s._v(" "),n("li",[s._v("bigint")])]),s._v(" "),n("p",[n("strong",[s._v("「基本数据类型是直接存储在栈中」")]),s._v(", 浏览器会在计算机的内存中开辟一块内存, 用于执行JS代码, 这就是栈内存：执行环境栈, 而基本数据类型是直接存储在栈内存中")]),s._v(" "),n("h2",{attrs:{id:"_2-引用数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用数据类型"}},[s._v("#")]),s._v(" 2. 引用数据类型")]),s._v(" "),n("ul",[n("li",[s._v("object")]),s._v(" "),n("li",[s._v("array")]),s._v(" "),n("li",[s._v("function")])]),s._v(" "),n("p",[n("strong",[s._v("「存储在单独开辟一块内存中：堆内存」")]),s._v(", 在创建引用数据类型时，会单独开辟出一块内存(Heap):堆内存, 引用数据类型会存储在这个堆内存中。每一个堆内存都有一个16进制的地址，这个地址会放到栈中存储，方便后期变量的关联")]),s._v(" "),n("img",{attrs:{src:a(590),width:"300"}}),s._v(" "),n("h2",{attrs:{id:"_3-数据类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据类型转换"}},[s._v("#")]),s._v(" 3. 数据类型转换")]),s._v(" "),n("h3",{attrs:{id:"_1-其他数据类型转换成number"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-其他数据类型转换成number"}},[s._v("#")]),s._v(" 1.其他数据类型转换成number")]),s._v(" "),n("ul",[n("li",[s._v("显示转换\n"),n("ul",[n("li",[s._v("Number([value])")]),s._v(" "),n("li",[s._v("parseInt/parseFloat([value])")])])]),s._v(" "),n("li",[s._v("隐式转换（浏览器内部默认会转换成number类型）\n"),n("ul",[n("li",[s._v("isNan([value])")]),s._v(" "),n("li",[s._v("数学运算（特殊情况：+号在出现字符串的时候，会进行字符串拼接）")]),s._v(" "),n("li",[s._v("在==比较的时候，有些值需要转换成number再进行比较")])])])]),s._v(" "),n("div",{staticClass:"language-markdown line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-markdown"}},[n("code",[s._v("对象在做数学运算的时候(对象转换成数字)：底层机制\n\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[s._v("1.")]),s._v(" 检测对象的 Symbol.toPrimitive 这个属性值，如果有则基于这个值进行运算\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[s._v("2.")]),s._v(" 如果没有，检测对象的 valueOf() 这个值「原始值:基本类型值」，如果有则基于这个值进行运算\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[s._v("3.")]),s._v(" 如果不是原始值，获取对象的 toString() 把其变为字符串，当转成字符串后，+号则进进行字符串拼接\n"),n("span",{pre:!0,attrs:{class:"token list punctuation"}},[s._v("4.")]),s._v(" 如果最后就是想变为数字，则再把字符串转换为数字即可\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '20[object Object]'")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 20, 因为前面的空对象在解析的时候会被解析成代码块")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Number机制")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'10'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 10")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1abc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只要出现非有效数字都是NaN")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NaN")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0, 反之true为1")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 对象转成数字类型，参考上面的说明")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// parseInt机制：")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从字符串左侧开始查找有效数字字符")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 只要一遇到无效数字字符，则停止查找")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// parseFloat则是多识别一个小数点")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NaN")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("isNaN")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，需要先Number('')转成0，再isNaN")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NaN，需要先把null转成字符串")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'10abc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 10")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseFloat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1.2ab'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("parseInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1.8abc'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1.2 + 1")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h3",{attrs:{id:"_2-其他数据类型转换成string"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-其他数据类型转换成string"}},[s._v("#")]),s._v(" 2.其他数据类型转换成string")]),s._v(" "),n("ul",[n("li",[s._v("能直接使用的办法\n"),n("ul",[n("li",[s._v("toString()")]),s._v(" "),n("li",[s._v("String()")])])]),s._v(" "),n("li",[s._v("隐式转换\n"),n("ul",[n("li",[s._v("在加号运算的时候，如果一边出现了字符串，则是字符串拼接")]),s._v(" "),n("li",[s._v("toString()")])])])]),s._v(" "),n("div",{staticClass:"language-m line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1. 把其他数据类型转换成字符串类型很简单，一般是直接引号''包起来。\n2. 只有{}普通对象调用toString()，不是转换成字符串，而是类型检测，返回的结果是：\"[object Object]\"\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"_3-其他数据类型转换成boolean"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-其他数据类型转换成boolean"}},[s._v("#")]),s._v(" 3.其他数据类型转换成boolean")]),s._v(" "),n("ul",[n("li",[s._v("转换方式\n"),n("ul",[n("li",[s._v("!转换布尔值后取反")]),s._v(" "),n("li",[s._v("!!转换为布尔类型")]),s._v(" "),n("li",[s._v("Boolean([val])")])])]),s._v(" "),n("li",[s._v("隐式转换\n"),n("ul",[n("li",[s._v("在条件判断中，条件的处理结果就是布尔类型值")])])])]),s._v(" "),n("p",[n("strong",[s._v("「规则：只有0、NaN、null、undefined、空字符串这5个值会变成布尔类型的false，其余的都是true」")])]),s._v(" "),n("h3",{attrs:{id:"_4-比较-数据转换规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-比较-数据转换规则"}},[s._v("#")]),s._v(" 4. ==比较，数据转换规则")]),s._v(" "),n("ul",[n("li",[s._v("两边都是一样的数据类型（特殊情况）\n"),n("ul",[n("li",[s._v("{}=={} : false, 引用类型比较的是堆内存地址")]),s._v(" "),n("li",[s._v("[]==[] :false, 原因同上")]),s._v(" "),n("li",[s._v("NaN==NaN:false")])])]),s._v(" "),n("li",[s._v("==两边是不同的数据类型\n"),n("ul",[n("li",[s._v("null==undefined : true, 除此之外, null/undefined和其他数据类型值都不相等")]),s._v(" "),n("li",[s._v("对象==字符串，要把对象转换成字符串后再进行比较")]),s._v(" "),n("li",[s._v("剩下的==两边数据类型不一样的，都需要转换成number类型再进行比较")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);